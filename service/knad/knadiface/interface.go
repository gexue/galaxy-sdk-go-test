// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package knadiface provides an interface to enable mocking the knad service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package knadiface

import (
	"github.com/gexue/galaxy-sdk-go-test/service/knad"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

// KnadAPI provides an interface to enable mocking the
// knad.Knad service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//	// myFunc uses an SDK service client to make a request to
//	// knad.
//	func myFunc(svc knadiface.KnadAPI) bool {
//	    // Make svc.AssociateIp request
//	}
//
//	func main() {
//	    sess := session.New()
//	    svc := knad.New(sess)
//
//	    myFunc(svc)
//	}
//
// In your _test.go file:
//
//	// Define a mock struct to be used in your unit tests of myFunc.
//	type mockKnadClient struct {
//	    knadiface.KnadAPI
//	}
//	func (m *mockKnadClient) AssociateIp(input *map[string]interface{}) (*map[string]interface{}, error) {
//	    // mock response/functionality
//	}
//
//	func TestMyFunc(t *testing.T) {
//	    // Setup Test
//	    mockSvc := &mockKnadClient{}
//
//	    myfunc(mockSvc)
//
//	    // Verify myFunc's functionality
//	}
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type KnadAPI interface {
	AssociateIp(*map[string]interface{}) (*map[string]interface{}, error)
	AssociateIpWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	AssociateIpRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	CreateKnad(*map[string]interface{}) (*map[string]interface{}, error)
	CreateKnadWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	CreateKnadRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DeleteKnad(*map[string]interface{}) (*map[string]interface{}, error)
	DeleteKnadWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DeleteKnadRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DescribeKnad(*map[string]interface{}) (*map[string]interface{}, error)
	DescribeKnadWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DescribeKnadRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DisassociateIp(*map[string]interface{}) (*map[string]interface{}, error)
	DisassociateIpWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DisassociateIpRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	IpList(*map[string]interface{}) (*map[string]interface{}, error)
	IpListWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	IpListRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	ModifyKnad(*map[string]interface{}) (*map[string]interface{}, error)
	ModifyKnadWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	ModifyKnadRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})
}

var _ KnadAPI = (*knad.Knad)(nil)
