// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package monitorv4iface provides an interface to enable mocking the monitorv4 service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package monitorv4iface

import (
	"github.com/gexue/galaxy-sdk-go-test/service/monitorv4"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

// Monitorv4API provides an interface to enable mocking the
// monitorv4.Monitorv4 service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // monitorv4.
//    func myFunc(svc monitorv4iface.Monitorv4API) bool {
//        // Make svc.AddAlarmReceives request
//    }
//
//    func main() {
//        sess := session.New()
//        svc := monitorv4.New(sess)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockMonitorv4Client struct {
//        monitorv4iface.Monitorv4API
//    }
//    func (m *mockMonitorv4Client) AddAlarmReceives(input *map[string]interface{}) (*map[string]interface{}, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockMonitorv4Client{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type Monitorv4API interface {
	AddAlarmReceives(*map[string]interface{}) (*map[string]interface{}, error)
	AddAlarmReceivesWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	AddAlarmReceivesRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DeleteAlarmReceives(*map[string]interface{}) (*map[string]interface{}, error)
	DeleteAlarmReceivesWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DeleteAlarmReceivesRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DescribeAlarmPolicy(*map[string]interface{}) (*map[string]interface{}, error)
	DescribeAlarmPolicyWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DescribeAlarmPolicyRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DescribeAlarmReceives(*map[string]interface{}) (*map[string]interface{}, error)
	DescribeAlarmReceivesWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DescribeAlarmReceivesRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DescribePolicyObject(*map[string]interface{}) (*map[string]interface{}, error)
	DescribePolicyObjectWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DescribePolicyObjectRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	GetAlertUser(*map[string]interface{}) (*map[string]interface{}, error)
	GetAlertUserWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	GetAlertUserRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	GetUserGroup(*map[string]interface{}) (*map[string]interface{}, error)
	GetUserGroupWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	GetUserGroupRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	ListAlarmPolicy(*map[string]interface{}) (*map[string]interface{}, error)
	ListAlarmPolicyWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	ListAlarmPolicyRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	UpdateAlertUserStatus(*map[string]interface{}) (*map[string]interface{}, error)
	UpdateAlertUserStatusWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	UpdateAlertUserStatusRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})
}

var _ Monitorv4API = (*monitorv4.Monitorv4)(nil)
